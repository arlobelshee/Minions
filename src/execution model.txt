Execution Model
--------------------

The program provides Missions to be performed and instructions about how to perform those Missions. The runtime then allocates Fools/Minions to handle those Missions.

A Minion is the unit of work/execution. Each Minion performs one Mission at a time - even if it is blocked waiting for something. Minions are inherently lazy and thus very good at waiting. Minions are also cheap to hire. Mission Control can create as many Minions as needed, even giving the same Mission to multiple different Minions (depending on the Mission Briefing).

Minions commonly need to manipulate objects on their Missions. Objects, however, are all located somewhere. They are kept in Buildings. Therefore, Minions need access to Buildings. Missions can have one of 3 levels of access to a building: observe (read-only), operate-in (full manipulation), and add-object (add objects to existing sets of objects, but no other manipulations - like tossing objects in through a window) access to a Building. Minions are granted those permissions when they take on a Mission Activity; reader/writer lock rules apply. This is all defined in the Mission Briefing.

Information can be transferred between Buildings only by value. Data in distinct Buildings can never refer to each other. Many Missions will involve destroying Buildings; this must not disrupt the Missions being performed in other Buildings. This by-value information exchange may be optimized by the simulator (e.g., to use copy on write with transfer on destruction), but that optimization must be entirely unobservable from the perspective of any Minion.

Minions are all stealthy. They can never observe each others' effects. At any time when a Minion is observing the interior of a building, no Minions will be performing Mission Activities which can alter the objects in that Building. Optimizations may cause Missions to overlap. However, all such operations will be sequenced such that the contents of a building cannot change while a Minion is active. This may be performed by having multiple copies of a Building active at once, with one set of Minions finishing survey-only Missions in that Building even while another Minion is adding to or living in a future version of that Building.

Each Minion also has its own local knowledge. It has a hide-out. This Building, however, is a little different: no other Minion is allowed in. As such, it can safely reference information held in other Buildings.

When a Building is destroyed, all Minions performing Mission Activities there are immediatley killed (aka, anyone operating in that Building). So are any Minions that ever attempt to access information from that Building. Minions that simply have knowledge of the destroyed Building are not killed - not until they attempt to use that knowledge to get data. Minions simply throwing objects into a destroyed Building are not killed. The attempted addition simply has no effect.

The Mission Briefing contains everything that Mission Control needs to send Minions on Missions.
	* Mission Objective. How to know when a Mission is completed and the Minion performing it can be killed (all Minions are always killed after performing their Missions).
	* Permission information. What Buildings the Minions will be aware of or operating in.
	* Mission Instructions. How to carry out the mission.
	* Resource Constraints. Information on whether this Mission should be performed by a fixed number of Minions or by an endless sea of Minions, spending limits for Minions on a per-Assignment basis, plus any other constraints that apply.
	* How to clean up after a Minion that died failing to carry out a Mission. This could be due to an unexpected circumstance (error) in the field, or could be because Mission Control sent an assassin after him (e.g., during process shutdown). Cleanup is simply another Mission, though typically a very simple one.

Mission Instructions are defined in terms of Messages and Assignments.

A Message is a signal that can be sent and received. Typically a message will trigger other actions, in response to other standing Missions. However, there is no guarantee of action by other Minions. A Message is simply sent back to Mission Control or to all Minions currently handling a particular Mission. It might not result in any action.

An Assignment is a well-defined set of work. It is represented at execution time as a delimited continuation (which may well be a chain of smaller continuations) ovr a sequence of instructions. It is represented in the language as some higher-level construct (typically a function/method, but possibly a generator, co-routine, or something else).

Each Minion is required to check in with Mission Control to get each Assignment in its Mission. Mission Control then ensures that the Minion does not exceed any spending limits during performance of that Mission. A Minion that exceeds any limit is immediately punished with assassination. A new Minion may be hired to continue or re-start the Mission or the Mission may be declared a failure, depending on information in the spending limits of the Mission Briefing.

Assignments need not be finite: Evil Overlords send Minions on hopeless Missions all the time. However, a Minion on infinite Assignment must still check in with Mission Control periodically, or it will exceed its budget and be assassinated.

All of this, of course, is a carefully constructed and maintained illusion. No Minion can ever pierce the veil of secrecy, but reality may be very different from what Minions see. The beings that maintain the illusion are Secret Agents.

Secret Agents are somewhat like Minions, except that the rules don't apply to them. They can see each other - though they still prefer to operate alone. They can easily detect - and manipulate - Minions. They can violate the rules of Buildings. In fact, each building has a janitor (who cleans up after Minions operating in that Building); the janitor is always an Agent. Other Agents include the Mission Control scheduler (could be several Agents), the mail room (delivers Minions' messages), and so on.

Because rules don't apply to them, it is very easy for Agents to cause trouble. Therefore, most people cannot recruit Agents. In fact, Evil Overlords are not allowed to interact with Agents at all.
